*********       Tya Chuanromanee        **********
*********       Week 5 Demo             **********
*********     3.12 to 3.17, 4.7-4.20    **********

3.12
Week5Programs> toUpper 'a'
'A'
Week5Programs> toUpper 'v'
'V'
Week5Programs> toUpper 'z'
'Z'
Week5Programs> toUpper 'Z'
'Z'
Week5Programs> toUpper '@'
'@'
Week5Programs> toUpper '~'
'~'

3.13
Week5Programs> charToNum '0'
0
Week5Programs> charToNum '4'
4
Week5Programs> charToNum '8'
8
Week5Programs> charToNum '9'
9
Week5Programs> charToNum 'G'
0
Week5Programs> charToNum '@'
0


3.14

Week5Programs> averageThree 0 0 0
0.0
Week5Programs> averageThree 1 0 0
0.3333333
Week5Programs> averageThree 1 2 3
2.0
Week5Programs> averageThree 3 2 1
2.0
Week5Programs> averageThree 3 3 2
2.666667
Week5Programs> averageThree 40 (-1) 30
23.0

3.15
Week5Programs> numberNDroots 9 0 0
1
Week5Programs> numberNDroots 1 0 0
1
Week5Programs> numberNDroots 1 4 4
1
Week5Programs> numberNDroots 1 (-4) 4
1
Week5Programs> numberNDroots 1 0 (-1)
2
Week5Programs> numberNDroots 1 0 1
0
Week5Programs> numberNDroots 1 0 0
1
Week5Programs> numberNDroots 1 4 0
2

3.16
Week5Programs> numberRoots 0 0 0
3
Week5Programs> numberRoots 0 0 4
0
Week5Programs> numberRoots 0 2 0
1
Week5Programs> numberRoots 0 4 4
1
Week5Programs> numberRoots 0 4 2
1
If a /= 0 it is non-degenerate, in which case numRoots will solve as a non-degenerate.
Week5Programs> numberRoots 1 0 (-1)
2


3.17
Week5Programs> largerRoot 1 6 9
-3.0
Week5Programs> smallerRoot 1 6 9
-3.0
Week5Programs> smallerRoot 1 (-6) 9
3.0
Week5Programs> largerRoot 1 (-6) 9
3.0
Week5Programs> largerRoot 1 (-5) 6
3.0
Week5Programs> smallerRoot 1 (-5) 6
2.0
Week5Programs> smallerRoot 0 0 0
0.0
Week5Programs> largerRoot 0 0 0
0.0
Week5Programs> largerRoot 1 0 9
0.0
Week5Programs> smallerRoot 1 0 9
0.0
Week5Programs> smallerRoot 1 5 6
-3.0
Week5Programs> largerRoot 1 5 6
-2.0
Week5Programs> largerRoot 1 5 (-6)
1.0
Week5Programs> smallerRoot 1 5 (-6)
-6.0

4.1
No need for maxThree demo because it has already been previously defined in the text.

Week5Programs> maxFour1 1 2 3 4
4
Week5Programs> maxFour1 1 4 2 3
4
Week5Programs> maxFour1 1 2 4 3
4
Week5Programs> maxFour1 4 1 2 3
4
Week5Programs> maxFour1 1 2 4 4
4
Week5Programs> maxFour1 1 2 2 4
4
Week5Programs> maxFour1 1 1 1 4
4
Week5Programs> maxFour1 4 2 2 3
4
Week5Programs> maxFour1 2 2 2 2
2

Week5Programs> maxFour2 1 2 3 4
4
Week5Programs> maxFour2 1 4 2 3
4
Week5Programs> maxFour2 1 2 4 3
4
Week5Programs> maxFour2 4 1 2 3
4
Week5Programs> maxFour2 1 2 4 4
4
Week5Programs> maxFour2 1 2 2 4
4
Week5Programs> maxFour2 1 1 1 4
4
Week5Programs> maxFour2 4 2 2 3
4
Week5Programs> maxFour2 2 2 2 2
2

Week5Programs> maxFour3 1 2 3 4
4
Week5Programs> maxFour3 1 4 2 3
4
Week5Programs> maxFour3 1 2 4 3
4
Week5Programs> maxFour3 4 1 2 3
4
Week5Programs> maxFour3 1 2 4 4
4
Week5Programs> maxFour3 1 2 2 4
4
Week5Programs> maxFour3 1 1 1 4
4
Week5Programs> maxFour3 4 2 2 3
4
Week5Programs> maxFour3 2 2 2 2
2


4.2
Week5Programs> between 1 2 3
True
Week5Programs> between 3 2 1
True
Week5Programs> between 1 1 1
True
Week5Programs> between 0 0 0
True
Week5Programs> between 3 3 1
True
Week5Programs> between 1 1 3
True
Week5Programs> between 1 5 4
False
Week5Programs> between 4 5 1
False
Week5Programs> between (-1) 0 1
True


4.3
Week5Programs> howManyEqual 34 25 36
0
Week5Programs> howManyEqual 34 25 34
2
Week5Programs> howManyEqual 34 34 34
3
Week5Programs> howManyEqual 0 0 0
3
Week5Programs> howManyEqual 0 1 1
2
Week5Programs> howManyEqual 1 0 1
2
Week5Programs> howManyEqual 5 5 4
2


4.4
Week5Programs> howManyOfFourEqual 1 1 1 1
4
Week5Programs> howManyOfFourEqual 1 1 1 2
3
Week5Programs> howManyOfFourEqual 1 1 2 1
3
Week5Programs> howManyOfFourEqual 1 2 1 1
3
Week5Programs> howManyOfFourEqual 2 1 1 1
3
Week5Programs> howManyOfFourEqual 2 1 1 2
2
Week5Programs> howManyOfFourEqual 2 2 1 1
2
Week5Programs> howManyOfFourEqual 2 1 2 1
2
Week5Programs> howManyOfFourEqual 1 2 2 1
2
Week5Programs> howManyOfFourEqual 1 2 1 2
2
Week5Programs> howManyOfFourEqual 1 1 2 2
2
Week5Programs> howManyOfFourEqual 1 2 3 4
0


4.7
Natural numbers are positive. Thus no need to test negative numbers.
Week5Programs> mult 1 0
0
Week5Programs> mult 0 1
0
Week5Programs> mult 4 9
36
Week5Programs> mult 9 4
36
Week5Programs> mult 0 0
0
Week5Programs> mult 10 8
80
Week5Programs> mult 8 10
80

4.8
Week5Programs> largestRoot 15
3
Week5Programs> largestRoot 16
4
Week5Programs> largestRoot 21
4
Week5Programs> largestRoot 25
5
Week5Programs> largestRoot 0
0
Week5Programs> largestRoot 1
1
Week5Programs> largestRoot 2
1
Week5Programs> largestRoot 3
1
Week5Programs> largestRoot 4
2
Week5Programs> largestRoot 8
2
It should not work for values < 0, so return 0.
Week5Programs> largestRoot (-8)
0
Week5Programs> largestRoot (-4)
0

4.9
Week5Programs> maxOff testFunc 4
44
Week5Programs> maxOff testFunc 2
44
Week5Programs> maxOff testFunc 1
44
Week5Programs> maxOff testFunc 0
0
Week5Programs> maxOff testFunc 100
44
Data.Char> maxOff testFunc (-1)
0

4.10
Test with testFunc and with testFunc 2 to cover all cases:
Week5Programs> zeroInFunc testFunc 0
True
Week5Programs> zeroInFunc testFunc 1
True
Week5Programs> zeroInFunc testFunc 2
True
Week5Programs> zeroInFunc testFunc2 2
False
Week5Programs> zeroInFunc testFunc2 0
False
Week5Programs> zeroInFunc testFunc2 1
False
Week5Programs> zeroInFunc testFunc2 10
True


4.11
Week5Programs> regions 5
16
Week5Programs> regions 4
11
Week5Programs> regions 3
7
Week5Programs> regions 2
4
Week5Programs> regions 1
2
Week5Programs> regions 0
1

4.12
Data.Char> numCuts 2
4
Week5Programs> numCuts 3
8
Week5Programs> numCuts 4
16
Week5Programs> numCuts 0
0
Week5Programs> numCuts 1
2

4.13
Week5Programs> highestCF 4 2
2
Week5Programs> highestCF 1 3
1
Week5Programs> highestCF 3 1
1
Week5Programs> highestCF 5 3
1
Week5Programs> highestCF 3 5
1
Week5Programs> highestCF 14 7
7
Week5Programs> highestCF 0 1
1
Week5Programs> highestCF 0 0
0

4.14
Week5Programs> powOfN 0
1
Week5Programs> powOfN 1
2
Week5Programs> powOfN 2
4
Week5Programs> powOfN 3
8
Week5Programs> powOfN 4
16
Week5Programs> powOfN 5
32
Week5Programs> powOfN 8
256
Week5Programs> powOfN 9
512
Week5Programs> powOfN 17
131072

4.18 Test cases are not included here because I did not write the function.
Test results and explanation is in the LHS file.
